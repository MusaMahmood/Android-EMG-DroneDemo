//
// Academic License - for use in teaching, academic research, and meeting
// course requirements at degree granting institutions only.  Not for
// government, commercial, or other organizational use.
// File: ctrainingRoutine1ch.cpp
//
// MATLAB Coder version            : 3.3
// C/C++ source code generated on  : 26-Oct-2017 16:16:21
//

// Include Files
#include "rt_nonfinite.h"
#include "ctrainingRoutine1ch.h"

// Function Declarations
static void b_filter(const double b[4], const double a[4], const double x[15018],
                     const double zi[3], double y[15018]);
static void b_filtfilt(const double x_in[15000], double y_out[15000]);
static void b_flipud(double x[15018]);
static double b_mean(const double x[250]);
static void b_power(const double a[250], double y[250]);
static void b_r2br_r2dit_trig(const creal_T x[512], const double costab[257],
  const double sintab[257], creal_T y[512]);
static void fft(const double x[250], creal_T y[250]);
static void filter(const double b[7], const double a[7], const double x[15036],
                   const double zi[6], double y[15036]);
static void filtfilt(const double x_in[15000], double y_out[15000]);
static void flipud(double x[15036]);
static double mean(const double x_data[], const int x_size[1]);
static void merge(int idx[250], double x[250], int offset, int np, int nq, int
                  iwork[250], double xwork[250]);
static void power(const double a[259], double y[259]);
static void r2br_r2dit_trig(const creal_T x[499], const double costab[257],
  const double sintab[257], creal_T y[512]);
static void r2br_r2dit_trig_impl(const creal_T x[250], const double costab[257],
  const double sintab[257], creal_T y[512]);
static void repmat(const double a[250], double b[250]);
static double rms(const double x[250]);
static void sig_rms_pad_fixed(const double b_signal[250], double y[250]);
static void sort(double x[250]);
static double sum(const double x[250]);
static double trapz(const double x[250]);
static void welch_psd(const double signals[250], const double window[250],
                      double CSM[125], double frequencies[125]);

// Function Definitions

//
// Arguments    : const double b[4]
//                const double a[4]
//                const double x[15018]
//                const double zi[3]
//                double y[15018]
// Return Type  : void
//
static void b_filter(const double b[4], const double a[4], const double x[15018],
                     const double zi[3], double y[15018])
{
  int k;
  int naxpy;
  int j;
  double as;
  for (k = 0; k < 3; k++) {
    y[k] = zi[k];
  }

  memset(&y[3], 0, 15015U * sizeof(double));
  for (k = 0; k < 15018; k++) {
    naxpy = 15018 - k;
    if (!(naxpy < 4)) {
      naxpy = 4;
    }

    for (j = 0; j + 1 <= naxpy; j++) {
      y[k + j] += x[k] * b[j];
    }

    naxpy = 15017 - k;
    if (!(naxpy < 3)) {
      naxpy = 3;
    }

    as = -y[k];
    for (j = 1; j <= naxpy; j++) {
      y[k + j] += as * a[j];
    }
  }
}

//
// Arguments    : const double x_in[15000]
//                double y_out[15000]
// Return Type  : void
//
static void b_filtfilt(const double x_in[15000], double y_out[15000])
{
  double d2;
  double d3;
  int i;
  static double y[15018];
  double b_y[15018];
  double a[3];
  static const double b_a[3] = { -0.95097188792826548, 1.9019437758560462,
    -0.95097188792780118 };

  static const double dv5[4] = { 0.950971887923409, -2.85291566377023,
    2.85291566377023, -0.950971887923409 };

  static const double dv6[4] = { 1.0, -2.89947959461186, 2.803947977383,
    -0.904347531392409 };

  d2 = 2.0 * x_in[0];
  d3 = 2.0 * x_in[14999];
  for (i = 0; i < 9; i++) {
    y[i] = d2 - x_in[9 - i];
  }

  memcpy(&y[9], &x_in[0], 15000U * sizeof(double));
  for (i = 0; i < 9; i++) {
    y[i + 15009] = d3 - x_in[14998 - i];
  }

  for (i = 0; i < 3; i++) {
    a[i] = b_a[i] * y[0];
  }

  memcpy(&b_y[0], &y[0], 15018U * sizeof(double));
  b_filter(dv5, dv6, b_y, a, y);
  b_flipud(y);
  for (i = 0; i < 3; i++) {
    a[i] = b_a[i] * y[0];
  }

  memcpy(&b_y[0], &y[0], 15018U * sizeof(double));
  b_filter(dv5, dv6, b_y, a, y);
  b_flipud(y);
  memcpy(&y_out[0], &y[9], 15000U * sizeof(double));
}

//
// Arguments    : double x[15018]
// Return Type  : void
//
static void b_flipud(double x[15018])
{
  int i;
  double xtmp;
  for (i = 0; i < 7509; i++) {
    xtmp = x[i];
    x[i] = x[15017 - i];
    x[15017 - i] = xtmp;
  }
}

//
// Arguments    : const double x[250]
// Return Type  : double
//
static double b_mean(const double x[250])
{
  double y;
  int k;
  y = x[0];
  for (k = 0; k < 249; k++) {
    y += x[k + 1];
  }

  y /= 250.0;
  return y;
}

//
// Arguments    : const double a[250]
//                double y[250]
// Return Type  : void
//
static void b_power(const double a[250], double y[250])
{
  int k;
  for (k = 0; k < 250; k++) {
    y[k] = a[k] * a[k];
  }
}

//
// Arguments    : const creal_T x[512]
//                const double costab[257]
//                const double sintab[257]
//                creal_T y[512]
// Return Type  : void
//
static void b_r2br_r2dit_trig(const creal_T x[512], const double costab[257],
  const double sintab[257], creal_T y[512])
{
  int ix;
  int ju;
  int iy;
  int i;
  boolean_T tst;
  double temp_re;
  double temp_im;
  int iheight;
  int istart;
  int j;
  double twid_re;
  double twid_im;
  int ihi;
  ix = 0;
  ju = 0;
  iy = 0;
  for (i = 0; i < 511; i++) {
    y[iy] = x[ix];
    iy = 512;
    tst = true;
    while (tst) {
      iy >>= 1;
      ju ^= iy;
      tst = ((ju & iy) == 0);
    }

    iy = ju;
    ix++;
  }

  y[iy] = x[ix];
  for (i = 0; i <= 511; i += 2) {
    temp_re = y[i + 1].re;
    temp_im = y[i + 1].im;
    y[i + 1].re = y[i].re - y[i + 1].re;
    y[i + 1].im = y[i].im - y[i + 1].im;
    y[i].re += temp_re;
    y[i].im += temp_im;
  }

  iy = 2;
  ix = 4;
  ju = 128;
  iheight = 509;
  while (ju > 0) {
    for (i = 0; i < iheight; i += ix) {
      temp_re = y[i + iy].re;
      temp_im = y[i + iy].im;
      y[i + iy].re = y[i].re - temp_re;
      y[i + iy].im = y[i].im - temp_im;
      y[i].re += temp_re;
      y[i].im += temp_im;
    }

    istart = 1;
    for (j = ju; j < 256; j += ju) {
      twid_re = costab[j];
      twid_im = sintab[j];
      i = istart;
      ihi = istart + iheight;
      while (i < ihi) {
        temp_re = twid_re * y[i + iy].re - twid_im * y[i + iy].im;
        temp_im = twid_re * y[i + iy].im + twid_im * y[i + iy].re;
        y[i + iy].re = y[i].re - temp_re;
        y[i + iy].im = y[i].im - temp_im;
        y[i].re += temp_re;
        y[i].im += temp_im;
        i += ix;
      }

      istart++;
    }

    ju /= 2;
    iy = ix;
    ix += ix;
    iheight -= iy;
  }

  for (iy = 0; iy < 512; iy++) {
    y[iy].re *= 0.001953125;
    y[iy].im *= 0.001953125;
  }
}

//
// Arguments    : const double x[250]
//                creal_T y[250]
// Return Type  : void
//
static void fft(const double x[250], creal_T y[250])
{
  int xidx;
  int k;
  static const double costab[257] = { 1.0, 0.9999247018391445,
    0.99969881869620425, 0.99932238458834954, 0.99879545620517241,
    0.99811811290014918, 0.99729045667869021, 0.996312612182778,
    0.99518472667219693, 0.99390697000235606, 0.99247953459871, 0.99090263542778,
    0.989176509964781, 0.98730141815785843, 0.98527764238894122,
    0.98310548743121629, 0.98078528040323043, 0.97831737071962765,
    0.97570213003852857, 0.97293995220556018, 0.970031253194544,
    0.96697647104485207, 0.96377606579543984, 0.96043051941556579,
    0.95694033573220882, 0.95330604035419386, 0.94952818059303667,
    0.94560732538052128, 0.94154406518302081, 0.937339011912575,
    0.932992798834739, 0.92850608047321559, 0.92387953251128674,
    0.91911385169005777, 0.91420975570353069, 0.90916798309052238,
    0.90398929312344334, 0.89867446569395382, 0.89322430119551532,
    0.88763962040285393, 0.881921264348355, 0.8760700941954066,
    0.87008699110871146, 0.8639728561215867, 0.85772861000027212,
    0.8513551931052652, 0.84485356524970712, 0.83822470555483808,
    0.83146961230254524, 0.82458930278502529, 0.81758481315158371,
    0.81045719825259477, 0.80320753148064494, 0.79583690460888357,
    0.78834642762660634, 0.78073722857209449, 0.773010453362737,
    0.765167265622459, 0.75720884650648457, 0.74913639452345937,
    0.74095112535495922, 0.73265427167241282, 0.724247082951467,
    0.71573082528381859, 0.70710678118654757, 0.69837624940897292,
    0.68954054473706683, 0.680600997795453, 0.67155895484701833,
    0.66241577759017178, 0.65317284295377676, 0.64383154288979139,
    0.63439328416364549, 0.62485948814238634, 0.61523159058062682,
    0.60551104140432555, 0.59569930449243336, 0.58579785745643886,
    0.57580819141784534, 0.56573181078361312, 0.55557023301960218,
    0.54532498842204646, 0.53499761988709715, 0.524589682678469,
    0.51410274419322166, 0.50353838372571758, 0.49289819222978404,
    0.48218377207912272, 0.47139673682599764, 0.46053871095824,
    0.44961132965460654, 0.43861623853852766, 0.42755509343028208,
    0.41642956009763715, 0.40524131400498986, 0.3939920400610481,
    0.38268343236508978, 0.37131719395183749, 0.35989503653498811,
    0.34841868024943456, 0.33688985339222005, 0.32531029216226293,
    0.31368174039889152, 0.30200594931922808, 0.29028467725446233,
    0.27851968938505306, 0.26671275747489837, 0.25486565960451457,
    0.24298017990326387, 0.23105810828067111, 0.2191012401568698,
    0.20711137619221856, 0.19509032201612825, 0.18303988795514095,
    0.17096188876030122, 0.15885814333386145, 0.14673047445536175,
    0.13458070850712617, 0.1224106751992162, 0.11022220729388306,
    0.0980171403295606, 0.0857973123444399, 0.073564563599667426,
    0.061320736302208578, 0.049067674327418015, 0.036807222941358832,
    0.024541228522912288, 0.012271538285719925, 0.0, -0.012271538285719925,
    -0.024541228522912288, -0.036807222941358832, -0.049067674327418015,
    -0.061320736302208578, -0.073564563599667426, -0.0857973123444399,
    -0.0980171403295606, -0.11022220729388306, -0.1224106751992162,
    -0.13458070850712617, -0.14673047445536175, -0.15885814333386145,
    -0.17096188876030122, -0.18303988795514095, -0.19509032201612825,
    -0.20711137619221856, -0.2191012401568698, -0.23105810828067111,
    -0.24298017990326387, -0.25486565960451457, -0.26671275747489837,
    -0.27851968938505306, -0.29028467725446233, -0.30200594931922808,
    -0.31368174039889152, -0.32531029216226293, -0.33688985339222005,
    -0.34841868024943456, -0.35989503653498811, -0.37131719395183749,
    -0.38268343236508978, -0.3939920400610481, -0.40524131400498986,
    -0.41642956009763715, -0.42755509343028208, -0.43861623853852766,
    -0.44961132965460654, -0.46053871095824, -0.47139673682599764,
    -0.48218377207912272, -0.49289819222978404, -0.50353838372571758,
    -0.51410274419322166, -0.524589682678469, -0.53499761988709715,
    -0.54532498842204646, -0.55557023301960218, -0.56573181078361312,
    -0.57580819141784534, -0.58579785745643886, -0.59569930449243336,
    -0.60551104140432555, -0.61523159058062682, -0.62485948814238634,
    -0.63439328416364549, -0.64383154288979139, -0.65317284295377676,
    -0.66241577759017178, -0.67155895484701833, -0.680600997795453,
    -0.68954054473706683, -0.69837624940897292, -0.70710678118654757,
    -0.71573082528381859, -0.724247082951467, -0.73265427167241282,
    -0.74095112535495922, -0.74913639452345937, -0.75720884650648457,
    -0.765167265622459, -0.773010453362737, -0.78073722857209449,
    -0.78834642762660634, -0.79583690460888357, -0.80320753148064494,
    -0.81045719825259477, -0.81758481315158371, -0.82458930278502529,
    -0.83146961230254524, -0.83822470555483808, -0.84485356524970712,
    -0.8513551931052652, -0.85772861000027212, -0.8639728561215867,
    -0.87008699110871146, -0.8760700941954066, -0.881921264348355,
    -0.88763962040285393, -0.89322430119551532, -0.89867446569395382,
    -0.90398929312344334, -0.90916798309052238, -0.91420975570353069,
    -0.91911385169005777, -0.92387953251128674, -0.92850608047321559,
    -0.932992798834739, -0.937339011912575, -0.94154406518302081,
    -0.94560732538052128, -0.94952818059303667, -0.95330604035419386,
    -0.95694033573220882, -0.96043051941556579, -0.96377606579543984,
    -0.96697647104485207, -0.970031253194544, -0.97293995220556018,
    -0.97570213003852857, -0.97831737071962765, -0.98078528040323043,
    -0.98310548743121629, -0.98527764238894122, -0.98730141815785843,
    -0.989176509964781, -0.99090263542778, -0.99247953459871,
    -0.99390697000235606, -0.99518472667219693, -0.996312612182778,
    -0.99729045667869021, -0.99811811290014918, -0.99879545620517241,
    -0.99932238458834954, -0.99969881869620425, -0.9999247018391445, -1.0 };

  static const double sintab[257] = { 0.0, -0.012271538285719925,
    -0.024541228522912288, -0.036807222941358832, -0.049067674327418015,
    -0.061320736302208578, -0.073564563599667426, -0.0857973123444399,
    -0.0980171403295606, -0.11022220729388306, -0.1224106751992162,
    -0.13458070850712617, -0.14673047445536175, -0.15885814333386145,
    -0.17096188876030122, -0.18303988795514095, -0.19509032201612825,
    -0.20711137619221856, -0.2191012401568698, -0.23105810828067111,
    -0.24298017990326387, -0.25486565960451457, -0.26671275747489837,
    -0.27851968938505306, -0.29028467725446233, -0.30200594931922808,
    -0.31368174039889152, -0.32531029216226293, -0.33688985339222005,
    -0.34841868024943456, -0.35989503653498811, -0.37131719395183749,
    -0.38268343236508978, -0.3939920400610481, -0.40524131400498986,
    -0.41642956009763715, -0.42755509343028208, -0.43861623853852766,
    -0.44961132965460654, -0.46053871095824, -0.47139673682599764,
    -0.48218377207912272, -0.49289819222978404, -0.50353838372571758,
    -0.51410274419322166, -0.524589682678469, -0.53499761988709715,
    -0.54532498842204646, -0.55557023301960218, -0.56573181078361312,
    -0.57580819141784534, -0.58579785745643886, -0.59569930449243336,
    -0.60551104140432555, -0.61523159058062682, -0.62485948814238634,
    -0.63439328416364549, -0.64383154288979139, -0.65317284295377676,
    -0.66241577759017178, -0.67155895484701833, -0.680600997795453,
    -0.68954054473706683, -0.69837624940897292, -0.70710678118654757,
    -0.71573082528381859, -0.724247082951467, -0.73265427167241282,
    -0.74095112535495922, -0.74913639452345937, -0.75720884650648457,
    -0.765167265622459, -0.773010453362737, -0.78073722857209449,
    -0.78834642762660634, -0.79583690460888357, -0.80320753148064494,
    -0.81045719825259477, -0.81758481315158371, -0.82458930278502529,
    -0.83146961230254524, -0.83822470555483808, -0.84485356524970712,
    -0.8513551931052652, -0.85772861000027212, -0.8639728561215867,
    -0.87008699110871146, -0.8760700941954066, -0.881921264348355,
    -0.88763962040285393, -0.89322430119551532, -0.89867446569395382,
    -0.90398929312344334, -0.90916798309052238, -0.91420975570353069,
    -0.91911385169005777, -0.92387953251128674, -0.92850608047321559,
    -0.932992798834739, -0.937339011912575, -0.94154406518302081,
    -0.94560732538052128, -0.94952818059303667, -0.95330604035419386,
    -0.95694033573220882, -0.96043051941556579, -0.96377606579543984,
    -0.96697647104485207, -0.970031253194544, -0.97293995220556018,
    -0.97570213003852857, -0.97831737071962765, -0.98078528040323043,
    -0.98310548743121629, -0.98527764238894122, -0.98730141815785843,
    -0.989176509964781, -0.99090263542778, -0.99247953459871,
    -0.99390697000235606, -0.99518472667219693, -0.996312612182778,
    -0.99729045667869021, -0.99811811290014918, -0.99879545620517241,
    -0.99932238458834954, -0.99969881869620425, -0.9999247018391445, -1.0,
    -0.9999247018391445, -0.99969881869620425, -0.99932238458834954,
    -0.99879545620517241, -0.99811811290014918, -0.99729045667869021,
    -0.996312612182778, -0.99518472667219693, -0.99390697000235606,
    -0.99247953459871, -0.99090263542778, -0.989176509964781,
    -0.98730141815785843, -0.98527764238894122, -0.98310548743121629,
    -0.98078528040323043, -0.97831737071962765, -0.97570213003852857,
    -0.97293995220556018, -0.970031253194544, -0.96697647104485207,
    -0.96377606579543984, -0.96043051941556579, -0.95694033573220882,
    -0.95330604035419386, -0.94952818059303667, -0.94560732538052128,
    -0.94154406518302081, -0.937339011912575, -0.932992798834739,
    -0.92850608047321559, -0.92387953251128674, -0.91911385169005777,
    -0.91420975570353069, -0.90916798309052238, -0.90398929312344334,
    -0.89867446569395382, -0.89322430119551532, -0.88763962040285393,
    -0.881921264348355, -0.8760700941954066, -0.87008699110871146,
    -0.8639728561215867, -0.85772861000027212, -0.8513551931052652,
    -0.84485356524970712, -0.83822470555483808, -0.83146961230254524,
    -0.82458930278502529, -0.81758481315158371, -0.81045719825259477,
    -0.80320753148064494, -0.79583690460888357, -0.78834642762660634,
    -0.78073722857209449, -0.773010453362737, -0.765167265622459,
    -0.75720884650648457, -0.74913639452345937, -0.74095112535495922,
    -0.73265427167241282, -0.724247082951467, -0.71573082528381859,
    -0.70710678118654757, -0.69837624940897292, -0.68954054473706683,
    -0.680600997795453, -0.67155895484701833, -0.66241577759017178,
    -0.65317284295377676, -0.64383154288979139, -0.63439328416364549,
    -0.62485948814238634, -0.61523159058062682, -0.60551104140432555,
    -0.59569930449243336, -0.58579785745643886, -0.57580819141784534,
    -0.56573181078361312, -0.55557023301960218, -0.54532498842204646,
    -0.53499761988709715, -0.524589682678469, -0.51410274419322166,
    -0.50353838372571758, -0.49289819222978404, -0.48218377207912272,
    -0.47139673682599764, -0.46053871095824, -0.44961132965460654,
    -0.43861623853852766, -0.42755509343028208, -0.41642956009763715,
    -0.40524131400498986, -0.3939920400610481, -0.38268343236508978,
    -0.37131719395183749, -0.35989503653498811, -0.34841868024943456,
    -0.33688985339222005, -0.32531029216226293, -0.31368174039889152,
    -0.30200594931922808, -0.29028467725446233, -0.27851968938505306,
    -0.26671275747489837, -0.25486565960451457, -0.24298017990326387,
    -0.23105810828067111, -0.2191012401568698, -0.20711137619221856,
    -0.19509032201612825, -0.18303988795514095, -0.17096188876030122,
    -0.15885814333386145, -0.14673047445536175, -0.13458070850712617,
    -0.1224106751992162, -0.11022220729388306, -0.0980171403295606,
    -0.0857973123444399, -0.073564563599667426, -0.061320736302208578,
    -0.049067674327418015, -0.036807222941358832, -0.024541228522912288,
    -0.012271538285719925, -0.0 };

  creal_T fy[512];
  static const creal_T wwc[499] = { { 0.99992104420381611,// re
      0.012566039883352607             // im
    }, { 0.99873695660601747,          // re
      0.050244318179769556             // im
    }, { 0.9936113105200084,           // re
      0.11285638487348168              // im
    }, { 0.97985505238424686,          // re
      0.19970998051440703              // im
    }, { 0.95105651629515353,          // re
      0.3090169943749474               // im
    }, { 0.89940525156637108,          // re
      0.43711576665093288              // im
    }, { 0.81633925071718394,          // re
      0.57757270342226752              // im
    }, { 0.69365330581280493,          // re
      0.72030902488790693              // im
    }, { 0.52517462996129571,          // re
      0.85099448179469184              // im
    }, { 0.30901699437494745,          // re
      0.95105651629515353              // im
    }, { 0.0502443181797696,           // re
      0.99873695660601747              // im
    }, { -0.23649899702372465,         // re
      0.971631732914674                // im
    }, { -0.52517462996129582,         // re
      0.85099448179469173              // im
    }, { -0.77846230156702334,         // re
      0.62769136129070058              // im
    }, { -0.95105651629515353,         // re
      0.30901699437494751              // im
    }, { -0.99715890026061393,         // re
      -0.075326805527932791            // im
    }, { -0.88229122643495328,         // re
      -0.47070393216533257             // im
    }, { -0.597904983057519,           // re
      -0.80156698487087641             // im
    }, { -0.17502305897527681,         // re
      -0.98456433452920522             // im
    }, { 0.30901699437494723,          // re
      -0.95105651629515364             // im
    }, { 0.73751311735817371,          // re
      -0.6753328081210247              // im
    }, { 0.97985505238424686,          // re
      -0.19970998051440719             // im
    }, { 0.934328942456612,            // re
      0.35641187871325075              // im
    }, { 0.57757270342226763,          // re
      0.81633925071718394              // im
    }, { 6.123233995736766E-17,        // re
      1.0                              // im
    }, { -0.59790498305751849,         // re
      0.80156698487087685              // im
    }, { -0.96538163883327388,         // re
      0.26084150628989705              // im
    }, { -0.91010597068499566,         // re
      -0.41437558099328409             // im
    }, { -0.41437558099328436,         // re
      -0.91010597068499555             // im
    }, { 0.30901699437494723,          // re
      -0.95105651629515364             // im
    }, { 0.88229122643495328,          // re
      -0.47070393216533252             // im
    }, { 0.954864544746643,            // re
      0.29704158157703492              // im
    }, { 0.43711576665093282,          // re
      0.89940525156637108              // im
    }, { -0.379779095521801,           // re
      0.925077206834458                // im
    }, { -0.95105651629515353,         // re
      0.30901699437494751              // im
    }, { -0.83752804004214176,         // re
      -0.546394346734269               // im
    }, { -0.075326805527932653,        // re
      -0.99715890026061393             // im
    }, { 0.76244251101144789,          // re
      -0.64705596156944434             // im
    }, { 0.96538163883327388,          // re
      0.26084150628989694              // im
    }, { 0.30901699437494745,          // re
      0.95105651629515353              // im
    }, { -0.64705596156944445,         // re
      0.76244251101144778              // im
    }, { -0.98456433452920533,         // re
      -0.17502305897527609             // im
    }, { -0.32094360980720976,         // re
      -0.94709830499474423             // im
    }, { 0.69365330581280438,          // re
      -0.72030902488790749             // im
    }, { 0.95105651629515353,          // re
      0.3090169943749474               // im
    }, { 0.1128563848734816,           // re
      0.9936113105200084               // im
    }, { -0.87018375466952569,         // re
      0.49272734154829162              // im
    }, { -0.77846230156702356,         // re
      -0.62769136129070036             // im
    }, { 0.32094360980720943,          // re
      -0.94709830499474434             // im
    }, { 1.0,                          // re
      -0.0                             // im
    }, { 0.29704158157703486,          // re
      0.954864544746643                // im
    }, { -0.83752804004214165,         // re
      0.54639434673426923              // im
    }, { -0.73751311735817393,         // re
      -0.67533280812102436             // im
    }, { 0.49272734154829212,          // re
      -0.87018375466952536             // im
    }, { 0.95105651629515353,          // re
      0.3090169943749474               // im
    }, { -0.13779029068463805,         // re
      0.99046142569665119              // im
    }, { -0.99992104420381611,         // re
      0.012566039883352836             // im
    }, { -0.13779029068463852,         // re
      -0.99046142569665119             // im
    }, { 0.97163173291467386,          // re
      -0.23649899702372515             // im
    }, { 0.30901699437494745,          // re
      0.95105651629515353              // im
    }, { -0.934328942456612,           // re
      0.35641187871325081              // im
    }, { -0.37977909552180106,         // re
      -0.925077206834458               // im
    }, { 0.92507720683445771,          // re
      -0.37977909552180189             // im
    }, { 0.35641187871325075,          // re
      0.934328942456612                // im
    }, { -0.95105651629515353,         // re
      0.30901699437494751              // im
    }, { -0.23649899702372423,         // re
      -0.97163173291467408             // im
    }, { 0.99046142569665119,          // re
      -0.13779029068463858             // im
    }, { 0.012566039883352776,         // re
      0.99992104420381611              // im
    }, { -0.9904614256966513,          // re
      -0.13779029068463777             // im
    }, { 0.30901699437494723,          // re
      -0.95105651629515364             // im
    }, { 0.87018375466952569,          // re
      0.49272734154829151              // im
    }, { -0.67533280812102436,         // re
      0.73751311735817393              // im
    }, { -0.5463943467342689,          // re
      -0.83752804004214187             // im
    }, { 0.954864544746643,            // re
      -0.29704158157703503             // im
    }, { 6.123233995736766E-17,        // re
      1.0                              // im
    }, { -0.94709830499474434,         // re
      -0.32094360980720948             // im
    }, { 0.62769136129070069,          // re
      -0.77846230156702323             // im
    }, { 0.49272734154829156,          // re
      0.87018375466952569              // im
    }, { -0.9936113105200084,          // re
      0.11285638487348143              // im
    }, { 0.30901699437494723,          // re
      -0.95105651629515364             // im
    }, { 0.72030902488790693,          // re
      0.69365330581280493              // im
    }, { -0.94709830499474423,         // re
      0.32094360980720971              // im
    }, { 0.17502305897527645,          // re
      -0.98456433452920533             // im
    }, { 0.76244251101144789,          // re
      0.64705596156944423              // im
    }, { -0.95105651629515353,         // re
      0.30901699437494751              // im
    }, { 0.26084150628989716,          // re
      -0.96538163883327377             // im
    }, { 0.64705596156944434,          // re
      0.76244251101144789              // im
    }, { -0.99715890026061393,         // re
      0.0753268055279326               // im
    }, { 0.54639434673426857,          // re
      -0.8375280400421421              // im
    }, { 0.30901699437494745,          // re
      0.95105651629515353              // im
    }, { -0.92507720683445815,         // re
      -0.37977909552180072             // im
    }, { 0.89940525156637119,          // re
      -0.43711576665093255             // im
    }, { -0.297041581577035,           // re
      0.954864544746643                // im
    }, { -0.47070393216533246,         // re
      -0.88229122643495339             // im
    }, { 0.95105651629515353,          // re
      0.3090169943749474               // im
    }, { -0.91010597068499566,         // re
      0.41437558099328431              // im
    }, { 0.41437558099328403,          // re
      -0.91010597068499577             // im
    }, { 0.26084150628989677,          // re
      0.96538163883327388              // im
    }, { -0.80156698487087663,         // re
      -0.59790498305751882             // im
    }, { 1.0,                          // re
      -0.0                             // im
    }, { -0.81633925071718394,         // re
      0.57757270342226763              // im
    }, { 0.35641187871325092,          // re
      -0.93432894245661191             // im
    }, { 0.19970998051440722,          // re
      0.97985505238424686              // im
    }, { -0.67533280812102425,         // re
      -0.737513117358174               // im
    }, { 0.95105651629515353,          // re
      0.3090169943749474               // im
    }, { -0.98456433452920533,         // re
      0.17502305897527631              // im
    }, { 0.801566984870877,            // re
      -0.59790498305751838             // im
    }, { -0.47070393216533224,         // re
      0.8822912264349535               // im
    }, { 0.075326805527932292,         // re
      -0.99715890026061393             // im
    }, { 0.30901699437494745,          // re
      0.95105651629515353              // im
    }, { -0.62769136129070091,         // re
      -0.77846230156702312             // im
    }, { 0.850994481794692,            // re
      0.5251746299612956               // im
    }, { -0.971631732914674,           // re
      -0.23649899702372437             // im
    }, { 0.99873695660601747,          // re
      -0.050244318179770223            // im
    }, { -0.95105651629515353,         // re
      0.30901699437494751              // im
    }, { 0.85099448179469162,          // re
      -0.52517462996129616             // im
    }, { -0.72030902488790693,         // re
      0.69365330581280493              // im
    }, { 0.5775727034222673,           // re
      -0.81633925071718416             // im
    }, { -0.43711576665093271,         // re
      0.89940525156637119              // im
    }, { 0.30901699437494723,          // re
      -0.95105651629515364             // im
    }, { -0.19970998051440689,         // re
      0.97985505238424686              // im
    }, { 0.11285638487348157,          // re
      -0.9936113105200084              // im
    }, { -0.050244318179769473,        // re
      0.99873695660601747              // im
    }, { 0.012566039883352531,         // re
      -0.99992104420381611             // im
    }, { 6.123233995736766E-17,        // re
      1.0                              // im
    }, { 0.012566039883352531,         // re
      -0.99992104420381611             // im
    }, { -0.050244318179769473,        // re
      0.99873695660601747              // im
    }, { 0.11285638487348157,          // re
      -0.9936113105200084              // im
    }, { -0.19970998051440689,         // re
      0.97985505238424686              // im
    }, { 0.30901699437494723,          // re
      -0.95105651629515364             // im
    }, { -0.43711576665093271,         // re
      0.89940525156637119              // im
    }, { 0.5775727034222673,           // re
      -0.81633925071718416             // im
    }, { -0.72030902488790693,         // re
      0.69365330581280493              // im
    }, { 0.85099448179469162,          // re
      -0.52517462996129616             // im
    }, { -0.95105651629515353,         // re
      0.30901699437494751              // im
    }, { 0.99873695660601747,          // re
      -0.050244318179770223            // im
    }, { -0.971631732914674,           // re
      -0.23649899702372437             // im
    }, { 0.850994481794692,            // re
      0.5251746299612956               // im
    }, { -0.62769136129070091,         // re
      -0.77846230156702312             // im
    }, { 0.30901699437494745,          // re
      0.95105651629515353              // im
    }, { 0.075326805527932292,         // re
      -0.99715890026061393             // im
    }, { -0.47070393216533224,         // re
      0.8822912264349535               // im
    }, { 0.801566984870877,            // re
      -0.59790498305751838             // im
    }, { -0.98456433452920533,         // re
      0.17502305897527631              // im
    }, { 0.95105651629515353,          // re
      0.3090169943749474               // im
    }, { -0.67533280812102425,         // re
      -0.737513117358174               // im
    }, { 0.19970998051440722,          // re
      0.97985505238424686              // im
    }, { 0.35641187871325092,          // re
      -0.93432894245661191             // im
    }, { -0.81633925071718394,         // re
      0.57757270342226763              // im
    }, { 1.0,                          // re
      -0.0                             // im
    }, { -0.80156698487087663,         // re
      -0.59790498305751882             // im
    }, { 0.26084150628989677,          // re
      0.96538163883327388              // im
    }, { 0.41437558099328403,          // re
      -0.91010597068499577             // im
    }, { -0.91010597068499566,         // re
      0.41437558099328431              // im
    }, { 0.95105651629515353,          // re
      0.3090169943749474               // im
    }, { -0.47070393216533246,         // re
      -0.88229122643495339             // im
    }, { -0.297041581577035,           // re
      0.954864544746643                // im
    }, { 0.89940525156637119,          // re
      -0.43711576665093255             // im
    }, { -0.92507720683445815,         // re
      -0.37977909552180072             // im
    }, { 0.30901699437494745,          // re
      0.95105651629515353              // im
    }, { 0.54639434673426857,          // re
      -0.8375280400421421              // im
    }, { -0.99715890026061393,         // re
      0.0753268055279326               // im
    }, { 0.64705596156944434,          // re
      0.76244251101144789              // im
    }, { 0.26084150628989716,          // re
      -0.96538163883327377             // im
    }, { -0.95105651629515353,         // re
      0.30901699437494751              // im
    }, { 0.76244251101144789,          // re
      0.64705596156944423              // im
    }, { 0.17502305897527645,          // re
      -0.98456433452920533             // im
    }, { -0.94709830499474423,         // re
      0.32094360980720971              // im
    }, { 0.72030902488790693,          // re
      0.69365330581280493              // im
    }, { 0.30901699437494723,          // re
      -0.95105651629515364             // im
    }, { -0.9936113105200084,          // re
      0.11285638487348143              // im
    }, { 0.49272734154829156,          // re
      0.87018375466952569              // im
    }, { 0.62769136129070069,          // re
      -0.77846230156702323             // im
    }, { -0.94709830499474434,         // re
      -0.32094360980720948             // im
    }, { 6.123233995736766E-17,        // re
      1.0                              // im
    }, { 0.954864544746643,            // re
      -0.29704158157703503             // im
    }, { -0.5463943467342689,          // re
      -0.83752804004214187             // im
    }, { -0.67533280812102436,         // re
      0.73751311735817393              // im
    }, { 0.87018375466952569,          // re
      0.49272734154829151              // im
    }, { 0.30901699437494723,          // re
      -0.95105651629515364             // im
    }, { -0.9904614256966513,          // re
      -0.13779029068463777             // im
    }, { 0.012566039883352776,         // re
      0.99992104420381611              // im
    }, { 0.99046142569665119,          // re
      -0.13779029068463858             // im
    }, { -0.23649899702372423,         // re
      -0.97163173291467408             // im
    }, { -0.95105651629515353,         // re
      0.30901699437494751              // im
    }, { 0.35641187871325075,          // re
      0.934328942456612                // im
    }, { 0.92507720683445771,          // re
      -0.37977909552180189             // im
    }, { -0.37977909552180106,         // re
      -0.925077206834458               // im
    }, { -0.934328942456612,           // re
      0.35641187871325081              // im
    }, { 0.30901699437494745,          // re
      0.95105651629515353              // im
    }, { 0.97163173291467386,          // re
      -0.23649899702372515             // im
    }, { -0.13779029068463852,         // re
      -0.99046142569665119             // im
    }, { -0.99992104420381611,         // re
      0.012566039883352836             // im
    }, { -0.13779029068463805,         // re
      0.99046142569665119              // im
    }, { 0.95105651629515353,          // re
      0.3090169943749474               // im
    }, { 0.49272734154829212,          // re
      -0.87018375466952536             // im
    }, { -0.73751311735817393,         // re
      -0.67533280812102436             // im
    }, { -0.83752804004214165,         // re
      0.54639434673426923              // im
    }, { 0.29704158157703486,          // re
      0.954864544746643                // im
    }, { 1.0,                          // re
      -0.0                             // im
    }, { 0.32094360980720943,          // re
      -0.94709830499474434             // im
    }, { -0.77846230156702356,         // re
      -0.62769136129070036             // im
    }, { -0.87018375466952569,         // re
      0.49272734154829162              // im
    }, { 0.1128563848734816,           // re
      0.9936113105200084               // im
    }, { 0.95105651629515353,          // re
      0.3090169943749474               // im
    }, { 0.69365330581280438,          // re
      -0.72030902488790749             // im
    }, { -0.32094360980720976,         // re
      -0.94709830499474423             // im
    }, { -0.98456433452920533,         // re
      -0.17502305897527609             // im
    }, { -0.64705596156944445,         // re
      0.76244251101144778              // im
    }, { 0.30901699437494745,          // re
      0.95105651629515353              // im
    }, { 0.96538163883327388,          // re
      0.26084150628989694              // im
    }, { 0.76244251101144789,          // re
      -0.64705596156944434             // im
    }, { -0.075326805527932653,        // re
      -0.99715890026061393             // im
    }, { -0.83752804004214176,         // re
      -0.546394346734269               // im
    }, { -0.95105651629515353,         // re
      0.30901699437494751              // im
    }, { -0.379779095521801,           // re
      0.925077206834458                // im
    }, { 0.43711576665093282,          // re
      0.89940525156637108              // im
    }, { 0.954864544746643,            // re
      0.29704158157703492              // im
    }, { 0.88229122643495328,          // re
      -0.47070393216533252             // im
    }, { 0.30901699437494723,          // re
      -0.95105651629515364             // im
    }, { -0.41437558099328436,         // re
      -0.91010597068499555             // im
    }, { -0.91010597068499566,         // re
      -0.41437558099328409             // im
    }, { -0.96538163883327388,         // re
      0.26084150628989705              // im
    }, { -0.59790498305751849,         // re
      0.80156698487087685              // im
    }, { 6.123233995736766E-17,        // re
      1.0                              // im
    }, { 0.57757270342226763,          // re
      0.81633925071718394              // im
    }, { 0.934328942456612,            // re
      0.35641187871325075              // im
    }, { 0.97985505238424686,          // re
      -0.19970998051440719             // im
    }, { 0.73751311735817371,          // re
      -0.6753328081210247              // im
    }, { 0.30901699437494723,          // re
      -0.95105651629515364             // im
    }, { -0.17502305897527681,         // re
      -0.98456433452920522             // im
    }, { -0.597904983057519,           // re
      -0.80156698487087641             // im
    }, { -0.88229122643495328,         // re
      -0.47070393216533257             // im
    }, { -0.99715890026061393,         // re
      -0.075326805527932791            // im
    }, { -0.95105651629515353,         // re
      0.30901699437494751              // im
    }, { -0.77846230156702334,         // re
      0.62769136129070058              // im
    }, { -0.52517462996129582,         // re
      0.85099448179469173              // im
    }, { -0.23649899702372465,         // re
      0.971631732914674                // im
    }, { 0.0502443181797696,           // re
      0.99873695660601747              // im
    }, { 0.30901699437494745,          // re
      0.95105651629515353              // im
    }, { 0.52517462996129571,          // re
      0.85099448179469184              // im
    }, { 0.69365330581280493,          // re
      0.72030902488790693              // im
    }, { 0.81633925071718394,          // re
      0.57757270342226752              // im
    }, { 0.89940525156637108,          // re
      0.43711576665093288              // im
    }, { 0.95105651629515353,          // re
      0.3090169943749474               // im
    }, { 0.97985505238424686,          // re
      0.19970998051440703              // im
    }, { 0.9936113105200084,           // re
      0.11285638487348168              // im
    }, { 0.99873695660601747,          // re
      0.050244318179769556             // im
    }, { 0.99992104420381611,          // re
      0.012566039883352607             // im
    }, { 1.0,                          // re
      0.0                              // im
    }, { 0.99992104420381611,          // re
      0.012566039883352607             // im
    }, { 0.99873695660601747,          // re
      0.050244318179769556             // im
    }, { 0.9936113105200084,           // re
      0.11285638487348168              // im
    }, { 0.97985505238424686,          // re
      0.19970998051440703              // im
    }, { 0.95105651629515353,          // re
      0.3090169943749474               // im
    }, { 0.89940525156637108,          // re
      0.43711576665093288              // im
    }, { 0.81633925071718394,          // re
      0.57757270342226752              // im
    }, { 0.69365330581280493,          // re
      0.72030902488790693              // im
    }, { 0.52517462996129571,          // re
      0.85099448179469184              // im
    }, { 0.30901699437494745,          // re
      0.95105651629515353              // im
    }, { 0.0502443181797696,           // re
      0.99873695660601747              // im
    }, { -0.23649899702372465,         // re
      0.971631732914674                // im
    }, { -0.52517462996129582,         // re
      0.85099448179469173              // im
    }, { -0.77846230156702334,         // re
      0.62769136129070058              // im
    }, { -0.95105651629515353,         // re
      0.30901699437494751              // im
    }, { -0.99715890026061393,         // re
      -0.075326805527932791            // im
    }, { -0.88229122643495328,         // re
      -0.47070393216533257             // im
    }, { -0.597904983057519,           // re
      -0.80156698487087641             // im
    }, { -0.17502305897527681,         // re
      -0.98456433452920522             // im
    }, { 0.30901699437494723,          // re
      -0.95105651629515364             // im
    }, { 0.73751311735817371,          // re
      -0.6753328081210247              // im
    }, { 0.97985505238424686,          // re
      -0.19970998051440719             // im
    }, { 0.934328942456612,            // re
      0.35641187871325075              // im
    }, { 0.57757270342226763,          // re
      0.81633925071718394              // im
    }, { 6.123233995736766E-17,        // re
      1.0                              // im
    }, { -0.59790498305751849,         // re
      0.80156698487087685              // im
    }, { -0.96538163883327388,         // re
      0.26084150628989705              // im
    }, { -0.91010597068499566,         // re
      -0.41437558099328409             // im
    }, { -0.41437558099328436,         // re
      -0.91010597068499555             // im
    }, { 0.30901699437494723,          // re
      -0.95105651629515364             // im
    }, { 0.88229122643495328,          // re
      -0.47070393216533252             // im
    }, { 0.954864544746643,            // re
      0.29704158157703492              // im
    }, { 0.43711576665093282,          // re
      0.89940525156637108              // im
    }, { -0.379779095521801,           // re
      0.925077206834458                // im
    }, { -0.95105651629515353,         // re
      0.30901699437494751              // im
    }, { -0.83752804004214176,         // re
      -0.546394346734269               // im
    }, { -0.075326805527932653,        // re
      -0.99715890026061393             // im
    }, { 0.76244251101144789,          // re
      -0.64705596156944434             // im
    }, { 0.96538163883327388,          // re
      0.26084150628989694              // im
    }, { 0.30901699437494745,          // re
      0.95105651629515353              // im
    }, { -0.64705596156944445,         // re
      0.76244251101144778              // im
    }, { -0.98456433452920533,         // re
      -0.17502305897527609             // im
    }, { -0.32094360980720976,         // re
      -0.94709830499474423             // im
    }, { 0.69365330581280438,          // re
      -0.72030902488790749             // im
    }, { 0.95105651629515353,          // re
      0.3090169943749474               // im
    }, { 0.1128563848734816,           // re
      0.9936113105200084               // im
    }, { -0.87018375466952569,         // re
      0.49272734154829162              // im
    }, { -0.77846230156702356,         // re
      -0.62769136129070036             // im
    }, { 0.32094360980720943,          // re
      -0.94709830499474434             // im
    }, { 1.0,                          // re
      -0.0                             // im
    }, { 0.29704158157703486,          // re
      0.954864544746643                // im
    }, { -0.83752804004214165,         // re
      0.54639434673426923              // im
    }, { -0.73751311735817393,         // re
      -0.67533280812102436             // im
    }, { 0.49272734154829212,          // re
      -0.87018375466952536             // im
    }, { 0.95105651629515353,          // re
      0.3090169943749474               // im
    }, { -0.13779029068463805,         // re
      0.99046142569665119              // im
    }, { -0.99992104420381611,         // re
      0.012566039883352836             // im
    }, { -0.13779029068463852,         // re
      -0.99046142569665119             // im
    }, { 0.97163173291467386,          // re
      -0.23649899702372515             // im
    }, { 0.30901699437494745,          // re
      0.95105651629515353              // im
    }, { -0.934328942456612,           // re
      0.35641187871325081              // im
    }, { -0.37977909552180106,         // re
      -0.925077206834458               // im
    }, { 0.92507720683445771,          // re
      -0.37977909552180189             // im
    }, { 0.35641187871325075,          // re
      0.934328942456612                // im
    }, { -0.95105651629515353,         // re
      0.30901699437494751              // im
    }, { -0.23649899702372423,         // re
      -0.97163173291467408             // im
    }, { 0.99046142569665119,          // re
      -0.13779029068463858             // im
    }, { 0.012566039883352776,         // re
      0.99992104420381611              // im
    }, { -0.9904614256966513,          // re
      -0.13779029068463777             // im
    }, { 0.30901699437494723,          // re
      -0.95105651629515364             // im
    }, { 0.87018375466952569,          // re
      0.49272734154829151              // im
    }, { -0.67533280812102436,         // re
      0.73751311735817393              // im
    }, { -0.5463943467342689,          // re
      -0.83752804004214187             // im
    }, { 0.954864544746643,            // re
      -0.29704158157703503             // im
    }, { 6.123233995736766E-17,        // re
      1.0                              // im
    }, { -0.94709830499474434,         // re
      -0.32094360980720948             // im
    }, { 0.62769136129070069,          // re
      -0.77846230156702323             // im
    }, { 0.49272734154829156,          // re
      0.87018375466952569              // im
    }, { -0.9936113105200084,          // re
      0.11285638487348143              // im
    }, { 0.30901699437494723,          // re
      -0.95105651629515364             // im
    }, { 0.72030902488790693,          // re
      0.69365330581280493              // im
    }, { -0.94709830499474423,         // re
      0.32094360980720971              // im
    }, { 0.17502305897527645,          // re
      -0.98456433452920533             // im
    }, { 0.76244251101144789,          // re
      0.64705596156944423              // im
    }, { -0.95105651629515353,         // re
      0.30901699437494751              // im
    }, { 0.26084150628989716,          // re
      -0.96538163883327377             // im
    }, { 0.64705596156944434,          // re
      0.76244251101144789              // im
    }, { -0.99715890026061393,         // re
      0.0753268055279326               // im
    }, { 0.54639434673426857,          // re
      -0.8375280400421421              // im
    }, { 0.30901699437494745,          // re
      0.95105651629515353              // im
    }, { -0.92507720683445815,         // re
      -0.37977909552180072             // im
    }, { 0.89940525156637119,          // re
      -0.43711576665093255             // im
    }, { -0.297041581577035,           // re
      0.954864544746643                // im
    }, { -0.47070393216533246,         // re
      -0.88229122643495339             // im
    }, { 0.95105651629515353,          // re
      0.3090169943749474               // im
    }, { -0.91010597068499566,         // re
      0.41437558099328431              // im
    }, { 0.41437558099328403,          // re
      -0.91010597068499577             // im
    }, { 0.26084150628989677,          // re
      0.96538163883327388              // im
    }, { -0.80156698487087663,         // re
      -0.59790498305751882             // im
    }, { 1.0,                          // re
      -0.0                             // im
    }, { -0.81633925071718394,         // re
      0.57757270342226763              // im
    }, { 0.35641187871325092,          // re
      -0.93432894245661191             // im
    }, { 0.19970998051440722,          // re
      0.97985505238424686              // im
    }, { -0.67533280812102425,         // re
      -0.737513117358174               // im
    }, { 0.95105651629515353,          // re
      0.3090169943749474               // im
    }, { -0.98456433452920533,         // re
      0.17502305897527631              // im
    }, { 0.801566984870877,            // re
      -0.59790498305751838             // im
    }, { -0.47070393216533224,         // re
      0.8822912264349535               // im
    }, { 0.075326805527932292,         // re
      -0.99715890026061393             // im
    }, { 0.30901699437494745,          // re
      0.95105651629515353              // im
    }, { -0.62769136129070091,         // re
      -0.77846230156702312             // im
    }, { 0.850994481794692,            // re
      0.5251746299612956               // im
    }, { -0.971631732914674,           // re
      -0.23649899702372437             // im
    }, { 0.99873695660601747,          // re
      -0.050244318179770223            // im
    }, { -0.95105651629515353,         // re
      0.30901699437494751              // im
    }, { 0.85099448179469162,          // re
      -0.52517462996129616             // im
    }, { -0.72030902488790693,         // re
      0.69365330581280493              // im
    }, { 0.5775727034222673,           // re
      -0.81633925071718416             // im
    }, { -0.43711576665093271,         // re
      0.89940525156637119              // im
    }, { 0.30901699437494723,          // re
      -0.95105651629515364             // im
    }, { -0.19970998051440689,         // re
      0.97985505238424686              // im
    }, { 0.11285638487348157,          // re
      -0.9936113105200084              // im
    }, { -0.050244318179769473,        // re
      0.99873695660601747              // im
    }, { 0.012566039883352531,         // re
      -0.99992104420381611             // im
    }, { 6.123233995736766E-17,        // re
      1.0                              // im
    }, { 0.012566039883352531,         // re
      -0.99992104420381611             // im
    }, { -0.050244318179769473,        // re
      0.99873695660601747              // im
    }, { 0.11285638487348157,          // re
      -0.9936113105200084              // im
    }, { -0.19970998051440689,         // re
      0.97985505238424686              // im
    }, { 0.30901699437494723,          // re
      -0.95105651629515364             // im
    }, { -0.43711576665093271,         // re
      0.89940525156637119              // im
    }, { 0.5775727034222673,           // re
      -0.81633925071718416             // im
    }, { -0.72030902488790693,         // re
      0.69365330581280493              // im
    }, { 0.85099448179469162,          // re
      -0.52517462996129616             // im
    }, { -0.95105651629515353,         // re
      0.30901699437494751              // im
    }, { 0.99873695660601747,          // re
      -0.050244318179770223            // im
    }, { -0.971631732914674,           // re
      -0.23649899702372437             // im
    }, { 0.850994481794692,            // re
      0.5251746299612956               // im
    }, { -0.62769136129070091,         // re
      -0.77846230156702312             // im
    }, { 0.30901699437494745,          // re
      0.95105651629515353              // im
    }, { 0.075326805527932292,         // re
      -0.99715890026061393             // im
    }, { -0.47070393216533224,         // re
      0.8822912264349535               // im
    }, { 0.801566984870877,            // re
      -0.59790498305751838             // im
    }, { -0.98456433452920533,         // re
      0.17502305897527631              // im
    }, { 0.95105651629515353,          // re
      0.3090169943749474               // im
    }, { -0.67533280812102425,         // re
      -0.737513117358174               // im
    }, { 0.19970998051440722,          // re
      0.97985505238424686              // im
    }, { 0.35641187871325092,          // re
      -0.93432894245661191             // im
    }, { -0.81633925071718394,         // re
      0.57757270342226763              // im
    }, { 1.0,                          // re
      -0.0                             // im
    }, { -0.80156698487087663,         // re
      -0.59790498305751882             // im
    }, { 0.26084150628989677,          // re
      0.96538163883327388              // im
    }, { 0.41437558099328403,          // re
      -0.91010597068499577             // im
    }, { -0.91010597068499566,         // re
      0.41437558099328431              // im
    }, { 0.95105651629515353,          // re
      0.3090169943749474               // im
    }, { -0.47070393216533246,         // re
      -0.88229122643495339             // im
    }, { -0.297041581577035,           // re
      0.954864544746643                // im
    }, { 0.89940525156637119,          // re
      -0.43711576665093255             // im
    }, { -0.92507720683445815,         // re
      -0.37977909552180072             // im
    }, { 0.30901699437494745,          // re
      0.95105651629515353              // im
    }, { 0.54639434673426857,          // re
      -0.8375280400421421              // im
    }, { -0.99715890026061393,         // re
      0.0753268055279326               // im
    }, { 0.64705596156944434,          // re
      0.76244251101144789              // im
    }, { 0.26084150628989716,          // re
      -0.96538163883327377             // im
    }, { -0.95105651629515353,         // re
      0.30901699437494751              // im
    }, { 0.76244251101144789,          // re
      0.64705596156944423              // im
    }, { 0.17502305897527645,          // re
      -0.98456433452920533             // im
    }, { -0.94709830499474423,         // re
      0.32094360980720971              // im
    }, { 0.72030902488790693,          // re
      0.69365330581280493              // im
    }, { 0.30901699437494723,          // re
      -0.95105651629515364             // im
    }, { -0.9936113105200084,          // re
      0.11285638487348143              // im
    }, { 0.49272734154829156,          // re
      0.87018375466952569              // im
    }, { 0.62769136129070069,          // re
      -0.77846230156702323             // im
    }, { -0.94709830499474434,         // re
      -0.32094360980720948             // im
    }, { 6.123233995736766E-17,        // re
      1.0                              // im
    }, { 0.954864544746643,            // re
      -0.29704158157703503             // im
    }, { -0.5463943467342689,          // re
      -0.83752804004214187             // im
    }, { -0.67533280812102436,         // re
      0.73751311735817393              // im
    }, { 0.87018375466952569,          // re
      0.49272734154829151              // im
    }, { 0.30901699437494723,          // re
      -0.95105651629515364             // im
    }, { -0.9904614256966513,          // re
      -0.13779029068463777             // im
    }, { 0.012566039883352776,         // re
      0.99992104420381611              // im
    }, { 0.99046142569665119,          // re
      -0.13779029068463858             // im
    }, { -0.23649899702372423,         // re
      -0.97163173291467408             // im
    }, { -0.95105651629515353,         // re
      0.30901699437494751              // im
    }, { 0.35641187871325075,          // re
      0.934328942456612                // im
    }, { 0.92507720683445771,          // re
      -0.37977909552180189             // im
    }, { -0.37977909552180106,         // re
      -0.925077206834458               // im
    }, { -0.934328942456612,           // re
      0.35641187871325081              // im
    }, { 0.30901699437494745,          // re
      0.95105651629515353              // im
    }, { 0.97163173291467386,          // re
      -0.23649899702372515             // im
    }, { -0.13779029068463852,         // re
      -0.99046142569665119             // im
    }, { -0.99992104420381611,         // re
      0.012566039883352836             // im
    }, { -0.13779029068463805,         // re
      0.99046142569665119              // im
    }, { 0.95105651629515353,          // re
      0.3090169943749474               // im
    }, { 0.49272734154829212,          // re
      -0.87018375466952536             // im
    }, { -0.73751311735817393,         // re
      -0.67533280812102436             // im
    }, { -0.83752804004214165,         // re
      0.54639434673426923              // im
    }, { 0.29704158157703486,          // re
      0.954864544746643                // im
    }, { 1.0,                          // re
      -0.0                             // im
    }, { 0.32094360980720943,          // re
      -0.94709830499474434             // im
    }, { -0.77846230156702356,         // re
      -0.62769136129070036             // im
    }, { -0.87018375466952569,         // re
      0.49272734154829162              // im
    }, { 0.1128563848734816,           // re
      0.9936113105200084               // im
    }, { 0.95105651629515353,          // re
      0.3090169943749474               // im
    }, { 0.69365330581280438,          // re
      -0.72030902488790749             // im
    }, { -0.32094360980720976,         // re
      -0.94709830499474423             // im
    }, { -0.98456433452920533,         // re
      -0.17502305897527609             // im
    }, { -0.64705596156944445,         // re
      0.76244251101144778              // im
    }, { 0.30901699437494745,          // re
      0.95105651629515353              // im
    }, { 0.96538163883327388,          // re
      0.26084150628989694              // im
    }, { 0.76244251101144789,          // re
      -0.64705596156944434             // im
    }, { -0.075326805527932653,        // re
      -0.99715890026061393             // im
    }, { -0.83752804004214176,         // re
      -0.546394346734269               // im
    }, { -0.95105651629515353,         // re
      0.30901699437494751              // im
    }, { -0.379779095521801,           // re
      0.925077206834458                // im
    }, { 0.43711576665093282,          // re
      0.89940525156637108              // im
    }, { 0.954864544746643,            // re
      0.29704158157703492              // im
    }, { 0.88229122643495328,          // re
      -0.47070393216533252             // im
    }, { 0.30901699437494723,          // re
      -0.95105651629515364             // im
    }, { -0.41437558099328436,         // re
      -0.91010597068499555             // im
    }, { -0.91010597068499566,         // re
      -0.41437558099328409             // im
    }, { -0.96538163883327388,         // re
      0.26084150628989705              // im
    }, { -0.59790498305751849,         // re
      0.80156698487087685              // im
    }, { 6.123233995736766E-17,        // re
      1.0                              // im
    }, { 0.57757270342226763,          // re
      0.81633925071718394              // im
    }, { 0.934328942456612,            // re
      0.35641187871325075              // im
    }, { 0.97985505238424686,          // re
      -0.19970998051440719             // im
    }, { 0.73751311735817371,          // re
      -0.6753328081210247              // im
    }, { 0.30901699437494723,          // re
      -0.95105651629515364             // im
    }, { -0.17502305897527681,         // re
      -0.98456433452920522             // im
    }, { -0.597904983057519,           // re
      -0.80156698487087641             // im
    }, { -0.88229122643495328,         // re
      -0.47070393216533257             // im
    }, { -0.99715890026061393,         // re
      -0.075326805527932791            // im
    }, { -0.95105651629515353,         // re
      0.30901699437494751              // im
    }, { -0.77846230156702334,         // re
      0.62769136129070058              // im
    }, { -0.52517462996129582,         // re
      0.85099448179469173              // im
    }, { -0.23649899702372465,         // re
      0.971631732914674                // im
    }, { 0.0502443181797696,           // re
      0.99873695660601747              // im
    }, { 0.30901699437494745,          // re
      0.95105651629515353              // im
    }, { 0.52517462996129571,          // re
      0.85099448179469184              // im
    }, { 0.69365330581280493,          // re
      0.72030902488790693              // im
    }, { 0.81633925071718394,          // re
      0.57757270342226752              // im
    }, { 0.89940525156637108,          // re
      0.43711576665093288              // im
    }, { 0.95105651629515353,          // re
      0.3090169943749474               // im
    }, { 0.97985505238424686,          // re
      0.19970998051440703              // im
    }, { 0.9936113105200084,           // re
      0.11285638487348168              // im
    }, { 0.99873695660601747,          // re
      0.050244318179769556             // im
    }, { 0.99992104420381611,          // re
      0.012566039883352607             // im
    } };

  creal_T fv[512];
  static const double sintabinv[257] = { 0.0, 0.012271538285719925,
    0.024541228522912288, 0.036807222941358832, 0.049067674327418015,
    0.061320736302208578, 0.073564563599667426, 0.0857973123444399,
    0.0980171403295606, 0.11022220729388306, 0.1224106751992162,
    0.13458070850712617, 0.14673047445536175, 0.15885814333386145,
    0.17096188876030122, 0.18303988795514095, 0.19509032201612825,
    0.20711137619221856, 0.2191012401568698, 0.23105810828067111,
    0.24298017990326387, 0.25486565960451457, 0.26671275747489837,
    0.27851968938505306, 0.29028467725446233, 0.30200594931922808,
    0.31368174039889152, 0.32531029216226293, 0.33688985339222005,
    0.34841868024943456, 0.35989503653498811, 0.37131719395183749,
    0.38268343236508978, 0.3939920400610481, 0.40524131400498986,
    0.41642956009763715, 0.42755509343028208, 0.43861623853852766,
    0.44961132965460654, 0.46053871095824, 0.47139673682599764,
    0.48218377207912272, 0.49289819222978404, 0.50353838372571758,
    0.51410274419322166, 0.524589682678469, 0.53499761988709715,
    0.54532498842204646, 0.55557023301960218, 0.56573181078361312,
    0.57580819141784534, 0.58579785745643886, 0.59569930449243336,
    0.60551104140432555, 0.61523159058062682, 0.62485948814238634,
    0.63439328416364549, 0.64383154288979139, 0.65317284295377676,
    0.66241577759017178, 0.67155895484701833, 0.680600997795453,
    0.68954054473706683, 0.69837624940897292, 0.70710678118654757,
    0.71573082528381859, 0.724247082951467, 0.73265427167241282,
    0.74095112535495922, 0.74913639452345937, 0.75720884650648457,
    0.765167265622459, 0.773010453362737, 0.78073722857209449,
    0.78834642762660634, 0.79583690460888357, 0.80320753148064494,
    0.81045719825259477, 0.81758481315158371, 0.82458930278502529,
    0.83146961230254524, 0.83822470555483808, 0.84485356524970712,
    0.8513551931052652, 0.85772861000027212, 0.8639728561215867,
    0.87008699110871146, 0.8760700941954066, 0.881921264348355,
    0.88763962040285393, 0.89322430119551532, 0.89867446569395382,
    0.90398929312344334, 0.90916798309052238, 0.91420975570353069,
    0.91911385169005777, 0.92387953251128674, 0.92850608047321559,
    0.932992798834739, 0.937339011912575, 0.94154406518302081,
    0.94560732538052128, 0.94952818059303667, 0.95330604035419386,
    0.95694033573220882, 0.96043051941556579, 0.96377606579543984,
    0.96697647104485207, 0.970031253194544, 0.97293995220556018,
    0.97570213003852857, 0.97831737071962765, 0.98078528040323043,
    0.98310548743121629, 0.98527764238894122, 0.98730141815785843,
    0.989176509964781, 0.99090263542778, 0.99247953459871, 0.99390697000235606,
    0.99518472667219693, 0.996312612182778, 0.99729045667869021,
    0.99811811290014918, 0.99879545620517241, 0.99932238458834954,
    0.99969881869620425, 0.9999247018391445, 1.0, 0.9999247018391445,
    0.99969881869620425, 0.99932238458834954, 0.99879545620517241,
    0.99811811290014918, 0.99729045667869021, 0.996312612182778,
    0.99518472667219693, 0.99390697000235606, 0.99247953459871, 0.99090263542778,
    0.989176509964781, 0.98730141815785843, 0.98527764238894122,
    0.98310548743121629, 0.98078528040323043, 0.97831737071962765,
    0.97570213003852857, 0.97293995220556018, 0.970031253194544,
    0.96697647104485207, 0.96377606579543984, 0.96043051941556579,
    0.95694033573220882, 0.95330604035419386, 0.94952818059303667,
    0.94560732538052128, 0.94154406518302081, 0.937339011912575,
    0.932992798834739, 0.92850608047321559, 0.92387953251128674,
    0.91911385169005777, 0.91420975570353069, 0.90916798309052238,
    0.90398929312344334, 0.89867446569395382, 0.89322430119551532,
    0.88763962040285393, 0.881921264348355, 0.8760700941954066,
    0.87008699110871146, 0.8639728561215867, 0.85772861000027212,
    0.8513551931052652, 0.84485356524970712, 0.83822470555483808,
    0.83146961230254524, 0.82458930278502529, 0.81758481315158371,
    0.81045719825259477, 0.80320753148064494, 0.79583690460888357,
    0.78834642762660634, 0.78073722857209449, 0.773010453362737,
    0.765167265622459, 0.75720884650648457, 0.74913639452345937,
    0.74095112535495922, 0.73265427167241282, 0.724247082951467,
    0.71573082528381859, 0.70710678118654757, 0.69837624940897292,
    0.68954054473706683, 0.680600997795453, 0.67155895484701833,
    0.66241577759017178, 0.65317284295377676, 0.64383154288979139,
    0.63439328416364549, 0.62485948814238634, 0.61523159058062682,
    0.60551104140432555, 0.59569930449243336, 0.58579785745643886,
    0.57580819141784534, 0.56573181078361312, 0.55557023301960218,
    0.54532498842204646, 0.53499761988709715, 0.524589682678469,
    0.51410274419322166, 0.50353838372571758, 0.49289819222978404,
    0.48218377207912272, 0.47139673682599764, 0.46053871095824,
    0.44961132965460654, 0.43861623853852766, 0.42755509343028208,
    0.41642956009763715, 0.40524131400498986, 0.3939920400610481,
    0.38268343236508978, 0.37131719395183749, 0.35989503653498811,
    0.34841868024943456, 0.33688985339222005, 0.32531029216226293,
    0.31368174039889152, 0.30200594931922808, 0.29028467725446233,
    0.27851968938505306, 0.26671275747489837, 0.25486565960451457,
    0.24298017990326387, 0.23105810828067111, 0.2191012401568698,
    0.20711137619221856, 0.19509032201612825, 0.18303988795514095,
    0.17096188876030122, 0.15885814333386145, 0.14673047445536175,
    0.13458070850712617, 0.1224106751992162, 0.11022220729388306,
    0.0980171403295606, 0.0857973123444399, 0.073564563599667426,
    0.061320736302208578, 0.049067674327418015, 0.036807222941358832,
    0.024541228522912288, 0.012271538285719925, 0.0 };

  double fy_re;
  xidx = 0;
  for (k = 0; k < 250; k++) {
    y[k].re = wwc[k + 249].re * x[xidx];
    y[k].im = wwc[k + 249].im * -x[xidx];
    xidx++;
  }

  r2br_r2dit_trig_impl(y, costab, sintab, fy);
  r2br_r2dit_trig(wwc, costab, sintab, fv);
  for (xidx = 0; xidx < 512; xidx++) {
    fy_re = fy[xidx].re;
    fy[xidx].re = fy[xidx].re * fv[xidx].re - fy[xidx].im * fv[xidx].im;
    fy[xidx].im = fy_re * fv[xidx].im + fy[xidx].im * fv[xidx].re;
  }

  b_r2br_r2dit_trig(fy, costab, sintabinv, fv);
  xidx = 0;
  for (k = 0; k < 250; k++) {
    y[xidx].re = wwc[k + 249].re * fv[k + 249].re + wwc[k + 249].im * fv[k + 249]
      .im;
    y[xidx].im = wwc[k + 249].re * fv[k + 249].im - wwc[k + 249].im * fv[k + 249]
      .re;
    xidx++;
  }
}

//
// Arguments    : const double b[7]
//                const double a[7]
//                const double x[15036]
//                const double zi[6]
//                double y[15036]
// Return Type  : void
//
static void filter(const double b[7], const double a[7], const double x[15036],
                   const double zi[6], double y[15036])
{
  int k;
  int naxpy;
  int j;
  double as;
  for (k = 0; k < 6; k++) {
    y[k] = zi[k];
  }

  memset(&y[6], 0, 15030U * sizeof(double));
  for (k = 0; k < 15036; k++) {
    naxpy = 15036 - k;
    if (!(naxpy < 7)) {
      naxpy = 7;
    }

    for (j = 0; j + 1 <= naxpy; j++) {
      y[k + j] += x[k] * b[j];
    }

    naxpy = 15035 - k;
    if (!(naxpy < 6)) {
      naxpy = 6;
    }

    as = -y[k];
    for (j = 1; j <= naxpy; j++) {
      y[k + j] += as * a[j];
    }
  }
}

//
// Arguments    : const double x_in[15000]
//                double y_out[15000]
// Return Type  : void
//
static void filtfilt(const double x_in[15000], double y_out[15000])
{
  double d0;
  double d1;
  int i;
  static double y[15036];
  double b_y[15036];
  double a[6];
  static const double b_a[6] = { 0.22275347859979613, 0.16989850397289177,
    0.33991371041886664, 0.34619414482388972, 0.12656228167104569,
    0.17313682189292717 };

  static const double dv3[7] = { 0.777246521400202, -0.295149620198606,
    2.36909935327861, -0.591875563889248, 2.36909935327861, -0.295149620198606,
    0.777246521400202 };

  static const double dv4[7] = { 1.0, -0.348004594825511, 2.53911455972459,
    -0.585595129484226, 2.14946749012577, -0.248575079976725, 0.604109699507276
  };

  d0 = 2.0 * x_in[0];
  d1 = 2.0 * x_in[14999];
  for (i = 0; i < 18; i++) {
    y[i] = d0 - x_in[18 - i];
  }

  memcpy(&y[18], &x_in[0], 15000U * sizeof(double));
  for (i = 0; i < 18; i++) {
    y[i + 15018] = d1 - x_in[14998 - i];
  }

  for (i = 0; i < 6; i++) {
    a[i] = b_a[i] * y[0];
  }

  memcpy(&b_y[0], &y[0], 15036U * sizeof(double));
  filter(dv3, dv4, b_y, a, y);
  flipud(y);
  for (i = 0; i < 6; i++) {
    a[i] = b_a[i] * y[0];
  }

  memcpy(&b_y[0], &y[0], 15036U * sizeof(double));
  filter(dv3, dv4, b_y, a, y);
  flipud(y);
  memcpy(&y_out[0], &y[18], 15000U * sizeof(double));
}

//
// Arguments    : double x[15036]
// Return Type  : void
//
static void flipud(double x[15036])
{
  int i;
  double xtmp;
  for (i = 0; i < 7518; i++) {
    xtmp = x[i];
    x[i] = x[15035 - i];
    x[15035 - i] = xtmp;
  }
}

//
// Arguments    : const double x_data[]
//                const int x_size[1]
// Return Type  : double
//
static double mean(const double x_data[], const int x_size[1])
{
  double y;
  int k;
  if (x_size[0] == 0) {
    y = 0.0;
  } else {
    y = x_data[0];
    for (k = 2; k <= x_size[0]; k++) {
      y += x_data[k - 1];
    }
  }

  y /= (double)x_size[0];
  return y;
}

//
// Arguments    : int idx[250]
//                double x[250]
//                int offset
//                int np
//                int nq
//                int iwork[250]
//                double xwork[250]
// Return Type  : void
//
static void merge(int idx[250], double x[250], int offset, int np, int nq, int
                  iwork[250], double xwork[250])
{
  int n;
  int qend;
  int p;
  int iout;
  int exitg1;
  if (nq != 0) {
    n = np + nq;
    for (qend = 0; qend + 1 <= n; qend++) {
      iwork[qend] = idx[offset + qend];
      xwork[qend] = x[offset + qend];
    }

    p = 0;
    n = np;
    qend = np + nq;
    iout = offset - 1;
    do {
      exitg1 = 0;
      iout++;
      if (xwork[p] <= xwork[n]) {
        idx[iout] = iwork[p];
        x[iout] = xwork[p];
        if (p + 1 < np) {
          p++;
        } else {
          exitg1 = 1;
        }
      } else {
        idx[iout] = iwork[n];
        x[iout] = xwork[n];
        if (n + 1 < qend) {
          n++;
        } else {
          n = (iout - p) + 1;
          while (p + 1 <= np) {
            idx[n + p] = iwork[p];
            x[n + p] = xwork[p];
            p++;
          }

          exitg1 = 1;
        }
      }
    } while (exitg1 == 0);
  }
}

//
// Arguments    : const double a[259]
//                double y[259]
// Return Type  : void
//
static void power(const double a[259], double y[259])
{
  int k;
  for (k = 0; k < 259; k++) {
    y[k] = a[k] * a[k];
  }
}

//
// Arguments    : const creal_T x[499]
//                const double costab[257]
//                const double sintab[257]
//                creal_T y[512]
// Return Type  : void
//
static void r2br_r2dit_trig(const creal_T x[499], const double costab[257],
  const double sintab[257], creal_T y[512])
{
  int i;
  int ix;
  int ju;
  int iy;
  boolean_T tst;
  double temp_re;
  double temp_im;
  int iheight;
  int istart;
  int j;
  double twid_re;
  double twid_im;
  int ihi;
  for (i = 0; i < 512; i++) {
    y[i].re = 0.0;
    y[i].im = 0.0;
  }

  ix = 0;
  ju = 0;
  iy = 0;
  for (i = 0; i < 498; i++) {
    y[iy] = x[ix];
    iy = 512;
    tst = true;
    while (tst) {
      iy >>= 1;
      ju ^= iy;
      tst = ((ju & iy) == 0);
    }

    iy = ju;
    ix++;
  }

  y[iy] = x[ix];
  for (i = 0; i <= 511; i += 2) {
    temp_re = y[i + 1].re;
    temp_im = y[i + 1].im;
    y[i + 1].re = y[i].re - y[i + 1].re;
    y[i + 1].im = y[i].im - y[i + 1].im;
    y[i].re += temp_re;
    y[i].im += temp_im;
  }

  iy = 2;
  ix = 4;
  ju = 128;
  iheight = 509;
  while (ju > 0) {
    for (i = 0; i < iheight; i += ix) {
      temp_re = y[i + iy].re;
      temp_im = y[i + iy].im;
      y[i + iy].re = y[i].re - temp_re;
      y[i + iy].im = y[i].im - temp_im;
      y[i].re += temp_re;
      y[i].im += temp_im;
    }

    istart = 1;
    for (j = ju; j < 256; j += ju) {
      twid_re = costab[j];
      twid_im = sintab[j];
      i = istart;
      ihi = istart + iheight;
      while (i < ihi) {
        temp_re = twid_re * y[i + iy].re - twid_im * y[i + iy].im;
        temp_im = twid_re * y[i + iy].im + twid_im * y[i + iy].re;
        y[i + iy].re = y[i].re - temp_re;
        y[i + iy].im = y[i].im - temp_im;
        y[i].re += temp_re;
        y[i].im += temp_im;
        i += ix;
      }

      istart++;
    }

    ju /= 2;
    iy = ix;
    ix += ix;
    iheight -= iy;
  }
}

//
// Arguments    : const creal_T x[250]
//                const double costab[257]
//                const double sintab[257]
//                creal_T y[512]
// Return Type  : void
//
static void r2br_r2dit_trig_impl(const creal_T x[250], const double costab[257],
  const double sintab[257], creal_T y[512])
{
  int i;
  int ix;
  int ju;
  int iy;
  boolean_T tst;
  double temp_re;
  double temp_im;
  int iheight;
  int istart;
  int j;
  double twid_re;
  double twid_im;
  int ihi;
  for (i = 0; i < 512; i++) {
    y[i].re = 0.0;
    y[i].im = 0.0;
  }

  ix = 0;
  ju = 0;
  iy = 0;
  for (i = 0; i < 249; i++) {
    y[iy] = x[ix];
    iy = 512;
    tst = true;
    while (tst) {
      iy >>= 1;
      ju ^= iy;
      tst = ((ju & iy) == 0);
    }

    iy = ju;
    ix++;
  }

  y[iy] = x[ix];
  for (i = 0; i <= 511; i += 2) {
    temp_re = y[i + 1].re;
    temp_im = y[i + 1].im;
    y[i + 1].re = y[i].re - y[i + 1].re;
    y[i + 1].im = y[i].im - y[i + 1].im;
    y[i].re += temp_re;
    y[i].im += temp_im;
  }

  iy = 2;
  ix = 4;
  ju = 128;
  iheight = 509;
  while (ju > 0) {
    for (i = 0; i < iheight; i += ix) {
      temp_re = y[i + iy].re;
      temp_im = y[i + iy].im;
      y[i + iy].re = y[i].re - temp_re;
      y[i + iy].im = y[i].im - temp_im;
      y[i].re += temp_re;
      y[i].im += temp_im;
    }

    istart = 1;
    for (j = ju; j < 256; j += ju) {
      twid_re = costab[j];
      twid_im = sintab[j];
      i = istart;
      ihi = istart + iheight;
      while (i < ihi) {
        temp_re = twid_re * y[i + iy].re - twid_im * y[i + iy].im;
        temp_im = twid_re * y[i + iy].im + twid_im * y[i + iy].re;
        y[i + iy].re = y[i].re - temp_re;
        y[i + iy].im = y[i].im - temp_im;
        y[i].re += temp_re;
        y[i].im += temp_im;
        i += ix;
      }

      istart++;
    }

    ju /= 2;
    iy = ix;
    ix += ix;
    iheight -= iy;
  }
}

//
// Arguments    : const double a[250]
//                double b[250]
// Return Type  : void
//
static void repmat(const double a[250], double b[250])
{
  memcpy(&b[0], &a[0], 250U * sizeof(double));
}

//
// Arguments    : const double x[250]
// Return Type  : double
//
static double rms(const double x[250])
{
  double y;
  int i;
  double b_x[250];
  for (i = 0; i < 250; i++) {
    b_x[i] = x[i] * x[i];
  }

  y = b_x[0];
  for (i = 0; i < 249; i++) {
    y += b_x[i + 1];
  }

  return std::sqrt(y / 250.0);
}

//
// Arguments    : const double b_signal[250]
//                double y[250]
// Return Type  : void
//
static void sig_rms_pad_fixed(const double b_signal[250], double y[250])
{
  int i;
  double c_signal[259];
  double S[259];
  int b_index;
  static const unsigned char uv0[250] = { 1U, 2U, 3U, 4U, 5U, 6U, 7U, 8U, 9U,
    10U, 11U, 12U, 13U, 14U, 15U, 16U, 17U, 18U, 19U, 20U, 21U, 22U, 23U, 24U,
    25U, 26U, 27U, 28U, 29U, 30U, 31U, 32U, 33U, 34U, 35U, 36U, 37U, 38U, 39U,
    40U, 41U, 42U, 43U, 44U, 45U, 46U, 47U, 48U, 49U, 50U, 51U, 52U, 53U, 54U,
    55U, 56U, 57U, 58U, 59U, 60U, 61U, 62U, 63U, 64U, 65U, 66U, 67U, 68U, 69U,
    70U, 71U, 72U, 73U, 74U, 75U, 76U, 77U, 78U, 79U, 80U, 81U, 82U, 83U, 84U,
    85U, 86U, 87U, 88U, 89U, 90U, 91U, 92U, 93U, 94U, 95U, 96U, 97U, 98U, 99U,
    100U, 101U, 102U, 103U, 104U, 105U, 106U, 107U, 108U, 109U, 110U, 111U, 112U,
    113U, 114U, 115U, 116U, 117U, 118U, 119U, 120U, 121U, 122U, 123U, 124U, 125U,
    126U, 127U, 128U, 129U, 130U, 131U, 132U, 133U, 134U, 135U, 136U, 137U, 138U,
    139U, 140U, 141U, 142U, 143U, 144U, 145U, 146U, 147U, 148U, 149U, 150U, 151U,
    152U, 153U, 154U, 155U, 156U, 157U, 158U, 159U, 160U, 161U, 162U, 163U, 164U,
    165U, 166U, 167U, 168U, 169U, 170U, 171U, 172U, 173U, 174U, 175U, 176U, 177U,
    178U, 179U, 180U, 181U, 182U, 183U, 184U, 185U, 186U, 187U, 188U, 189U, 190U,
    191U, 192U, 193U, 194U, 195U, 196U, 197U, 198U, 199U, 200U, 201U, 202U, 203U,
    204U, 205U, 206U, 207U, 208U, 209U, 210U, 211U, 212U, 213U, 214U, 215U, 216U,
    217U, 218U, 219U, 220U, 221U, 222U, 223U, 224U, 225U, 226U, 227U, 228U, 229U,
    230U, 231U, 232U, 233U, 234U, 235U, 236U, 237U, 238U, 239U, 240U, 241U, 242U,
    243U, 244U, 245U, 246U, 247U, 248U, 249U, 250U };

  int i0;
  int i1;
  int S_size[1];
  int loop_ub;
  double x;

  //  CALCULATE RMS
  //  Zeropad signal
  //  Square the samples
  for (i = 0; i < 250; i++) {
    y[i] = 0.0;
    c_signal[i] = b_signal[i];
  }

  memset(&c_signal[250], 0, 9U * sizeof(double));
  power(c_signal, S);
  b_index = -1;
  for (i = 0; i < 250; i++) {
    b_index++;

    //  Average and take the square root of each window
    if (uv0[i] > uv0[i] + 9) {
      i0 = 0;
      i1 = 0;
    } else {
      i0 = i;
      i1 = i + 10;
    }

    S_size[0] = i1 - i0;
    loop_ub = i1 - i0;
    for (i1 = 0; i1 < loop_ub; i1++) {
      c_signal[i1] = S[i0 + i1];
    }

    x = mean(c_signal, S_size);
    x = std::sqrt(x);
    y[b_index] = x;
  }
}

//
// Arguments    : double x[250]
// Return Type  : void
//
static void sort(double x[250])
{
  int idx[250];
  int i;
  double xwork[250];
  double x4[4];
  int nNaNs;
  unsigned char idx4[4];
  int ib;
  int k;
  signed char perm[4];
  int bLen;
  int iwork[250];
  int nPairs;
  int i4;
  memset(&idx[0], 0, 250U * sizeof(int));
  for (i = 0; i < 4; i++) {
    x4[i] = 0.0;
    idx4[i] = 0;
  }

  memset(&xwork[0], 0, 250U * sizeof(double));
  nNaNs = -249;
  ib = 0;
  for (k = 0; k < 250; k++) {
    if (rtIsNaN(x[k])) {
      idx[-nNaNs] = k + 1;
      xwork[-nNaNs] = x[k];
      nNaNs++;
    } else {
      ib++;
      idx4[ib - 1] = (unsigned char)(k + 1);
      x4[ib - 1] = x[k];
      if (ib == 4) {
        i = (k - nNaNs) - 252;
        if (x4[0] <= x4[1]) {
          ib = 1;
          bLen = 2;
        } else {
          ib = 2;
          bLen = 1;
        }

        if (x4[2] <= x4[3]) {
          nPairs = 3;
          i4 = 4;
        } else {
          nPairs = 4;
          i4 = 3;
        }

        if (x4[ib - 1] <= x4[nPairs - 1]) {
          if (x4[bLen - 1] <= x4[nPairs - 1]) {
            perm[0] = (signed char)ib;
            perm[1] = (signed char)bLen;
            perm[2] = (signed char)nPairs;
            perm[3] = (signed char)i4;
          } else if (x4[bLen - 1] <= x4[i4 - 1]) {
            perm[0] = (signed char)ib;
            perm[1] = (signed char)nPairs;
            perm[2] = (signed char)bLen;
            perm[3] = (signed char)i4;
          } else {
            perm[0] = (signed char)ib;
            perm[1] = (signed char)nPairs;
            perm[2] = (signed char)i4;
            perm[3] = (signed char)bLen;
          }
        } else if (x4[ib - 1] <= x4[i4 - 1]) {
          if (x4[bLen - 1] <= x4[i4 - 1]) {
            perm[0] = (signed char)nPairs;
            perm[1] = (signed char)ib;
            perm[2] = (signed char)bLen;
            perm[3] = (signed char)i4;
          } else {
            perm[0] = (signed char)nPairs;
            perm[1] = (signed char)ib;
            perm[2] = (signed char)i4;
            perm[3] = (signed char)bLen;
          }
        } else {
          perm[0] = (signed char)nPairs;
          perm[1] = (signed char)i4;
          perm[2] = (signed char)ib;
          perm[3] = (signed char)bLen;
        }

        idx[i] = idx4[perm[0] - 1];
        idx[i + 1] = idx4[perm[1] - 1];
        idx[i + 2] = idx4[perm[2] - 1];
        idx[i + 3] = idx4[perm[3] - 1];
        x[i] = x4[perm[0] - 1];
        x[i + 1] = x4[perm[1] - 1];
        x[i + 2] = x4[perm[2] - 1];
        x[i + 3] = x4[perm[3] - 1];
        ib = 0;
      }
    }
  }

  if (ib > 0) {
    for (i = 0; i < 4; i++) {
      perm[i] = 0;
    }

    if (ib == 1) {
      perm[0] = 1;
    } else if (ib == 2) {
      if (x4[0] <= x4[1]) {
        perm[0] = 1;
        perm[1] = 2;
      } else {
        perm[0] = 2;
        perm[1] = 1;
      }
    } else if (x4[0] <= x4[1]) {
      if (x4[1] <= x4[2]) {
        perm[0] = 1;
        perm[1] = 2;
        perm[2] = 3;
      } else if (x4[0] <= x4[2]) {
        perm[0] = 1;
        perm[1] = 3;
        perm[2] = 2;
      } else {
        perm[0] = 3;
        perm[1] = 1;
        perm[2] = 2;
      }
    } else if (x4[0] <= x4[2]) {
      perm[0] = 2;
      perm[1] = 1;
      perm[2] = 3;
    } else if (x4[1] <= x4[2]) {
      perm[0] = 2;
      perm[1] = 3;
      perm[2] = 1;
    } else {
      perm[0] = 3;
      perm[1] = 2;
      perm[2] = 1;
    }

    for (k = 1; k <= ib; k++) {
      idx[(k - nNaNs) - ib] = idx4[perm[k - 1] - 1];
      x[(k - nNaNs) - ib] = x4[perm[k - 1] - 1];
    }
  }

  i = (nNaNs + 249) >> 1;
  for (k = 1; k <= i; k++) {
    ib = idx[k - nNaNs];
    idx[k - nNaNs] = idx[250 - k];
    idx[250 - k] = ib;
    x[k - nNaNs] = xwork[250 - k];
    x[250 - k] = xwork[k - nNaNs];
  }

  if (((nNaNs + 249) & 1) != 0) {
    x[(i - nNaNs) + 1] = xwork[(i - nNaNs) + 1];
  }

  if (1 - nNaNs > 1) {
    memset(&iwork[0], 0, 250U * sizeof(int));
    nPairs = (1 - nNaNs) >> 2;
    bLen = 4;
    while (nPairs > 1) {
      if ((nPairs & 1) != 0) {
        nPairs--;
        i = bLen * nPairs;
        ib = 1 - (nNaNs + i);
        if (ib > bLen) {
          merge(idx, x, i, bLen, ib - bLen, iwork, xwork);
        }
      }

      i = bLen << 1;
      nPairs >>= 1;
      for (k = 1; k <= nPairs; k++) {
        merge(idx, x, (k - 1) * i, bLen, bLen, iwork, xwork);
      }

      bLen = i;
    }

    if (1 - nNaNs > bLen) {
      merge(idx, x, 0, bLen, 1 - (nNaNs + bLen), iwork, xwork);
    }
  }
}

//
// Arguments    : const double x[250]
// Return Type  : double
//
static double sum(const double x[250])
{
  double y;
  int k;
  y = x[0];
  for (k = 0; k < 249; k++) {
    y += x[k + 1];
  }

  return y;
}

//
// Arguments    : const double x[250]
// Return Type  : double
//
static double trapz(const double x[250])
{
  double z;
  int iy;
  double ylast;
  int k;
  z = 0.0;
  iy = 0;
  ylast = x[0];
  for (k = 0; k < 249; k++) {
    iy++;
    z += (ylast + x[iy]) / 2.0;
    ylast = x[iy];
  }

  return z;
}

//
// if size(signals,2) > size(signals,1)
//      signals = signals.';
//  end
// Arguments    : const double signals[250]
//                const double window[250]
//                double CSM[125]
//                double frequencies[125]
// Return Type  : void
//
static void welch_psd(const double signals[250], const double window[250],
                      double CSM[125], double frequencies[125])
{
  int i;
  double a;
  double dv7[250];
  double b_signals[250];
  creal_T Data_Block[250];
  double dv8[250];

  //  Function for spectra estimation by Welch's method
  //  Developed by Luiz A. Baccala, Fl?vio Caduda and Luciano Caldas, all from
  //  Escola Polit?cnica - Poli-USP, with cooperation of Carlos Pagani and Felipe 
  //  Amaral from Escola de Engenharia de S?o Carlos - EESC-USP.
  //
  //  Cross-spectra matrix are estimated by Welch's method with 50% overlap and
  //  the window energy loss are compasated by a factor of 1/sum(Wi.^2) where
  //  Wi are the elements of the window [1]. Then, the spectra becomes:
  //  Sxy = fft(x)*conj(fft(y))/sum(Wi.^2)
  //
  //  Code was tested with a known- spectra signal from a white noise filtered
  //  by a filter. The variance (power) of the signal checks with the integral
  //  of the PSD estimated.
  //
  //  INPUT:
  //  -- signals: matrix of signals to perform the spectra estimatino. Size is
  //  [Samples x number of sensors];
  //  -- fs: samplerate in Hertz;
  //  -- window: data taper desired. Must be a vector. For best performance it
  //  should be a power of 2. For general applications do: window=hanning(1024); 
  //
  //  OUTPUT:
  //  -- CSM: Cross Spectral Matrix: Unilateral (0:fs/2) spectra. Welch's
  //  method is used with 50% overlap. Matrix size: sensors x sensors x
  //  windowsize/2
  //  -- frequencies: vector with all frequencies corresponding to each layer
  //  (3rd layer in depth) of CSM.
  //
  //  LAST REVISION: Aug - 18 - 2016
  //  ADDED 'fs' missing term in line 82, for calibration factor
  //  [1] Trobs,M.; Heinzel,G. "Improved spectrum estimation from digitized
  //  time series on a logarithmic frequency axis"
  //  doi:10.1016/j.measurement.2005.10.010
  for (i = 0; i < 125; i++) {
    frequencies[i] = i;
  }

  // must be even, best if 2^n
  // ORIGINAL;
  //  Data segmentation into blocks of size block_samples:
  // ORIGINAL
  //  S = zeros(ceil(block_samples/2),number_of_signals.^2);
  //  Retrieve current data block
  a = b_mean(signals);

  // Taper it
  repmat(window, dv7);
  for (i = 0; i < 250; i++) {
    b_signals[i] = (signals[i] - a) * dv7[i];
  }

  fft(b_signals, Data_Block);

  // FFT it,
  //  bilateral DFT
  //  viii
  // ORIGINAL
  //  Data_Block = Data_Block(1:ceil(block_samples/2),:);
  // All spectral combinations:
  // ORIGINAL
  //  P = zeros(ceil(block_samples/2)/2,number_of_signals.^2);
  //  THIS IS FOR WIND TUNNEL EESC-USP BEAMFORMING CODE
  //              P(:,c) = real(Data_Block(:,b).*conj(Data_Block(:,aa)));
  //  P(:,c) = Data_Block(:,b).*conj(Data_Block(:,aa));
  //  IS FOR FAN RIG BEAMFORMING CODE
  //  P(:,c) = Data_Block(:,aa).*conj(Data_Block(:,b)); % THIS IS THE ORIGINAL LINE 
  //  Sum the spectrums up ...
  b_power(window, dv8);
  a = sum(dv8) * 250.0;

  //  Average them out
  //  for a = 1:sensors
  for (i = 0; i < 125; i++) {
    CSM[i] = (Data_Block[i].re * Data_Block[i].re - Data_Block[i].im *
              -Data_Block[i].im) * 2.0 / a;
  }

  //  end
  //  clear S
  CSM[0] = (CSM[0] + CSM[0]) - CSM[0];
}

//
// Inputs:
//  dW = data array : [2 x 15000]
//  Outputs
//  P = [11 x 1] Contains double size parameters
//  .Index..,1....2....3....4....5....6....7..%
//  plot_style = {'r','.k','m','c','k','g','b'};
//  NUM_CH = 1;
// Arguments    : const double inputData[30000]
//                double F[30315]
// Return Type  : void
//
void ctrainingRoutine1ch(const double inputData[30000], double F[30315])
{
  static double FILT_FULL[15000];
  static double b_FILT_FULL[15000];
  int j;
  int ixstart;
  double dWF[250];
  double dv0[250];
  static double RMS[30315];
  double b_RMS[235];
  double sigRMSIntegral[235];
  double CLASS[235];
  static double PSD[29375];
  double MAX[235];
  double mtmp;
  int ftmp;
  boolean_T exitg1;
  static const double dv1[250] = { 0.0, 0.00015917615386623618,
    0.0006366032672731059, 0.0014319773601739749, 0.002544792014212871,
    0.003974338695163393, 0.0057197072040557351, 0.0077797862567046128,
    0.010153264191269051, 0.012838629803393287, 0.015834173308397981,
    0.019137987429907632, 0.022747968614222402, 0.026661818369660528,
    0.030877044730018455, 0.035390963841217371, 0.040200701670125349,
    0.045303195834467458, 0.050695197552658888, 0.05637327371231915,
    0.062333809056150435, 0.068573008483788556, 0.075086899468161272,
    0.0818713345848141, 0.088921994152595, 0.0962343889840151,
    0.10380386324353502, 0.11162559741195721, 0.11969461135503567,
    0.12800576749435055, 0.13655377407842811, 0.14533318855202326,
    0.15433842102141959, 0.1635637378135405, 0.17300326512660535,
    0.18265099277000596, 0.19250077799102322, 0.2025463493859454,
    0.21278131089310048, 0.22319914586525774, 0.23379322121880719,
    0.24455679165707467, 0.25548300396508339, 0.266564901373027,
    0.277795427985678, 0.289167433274908, 0.30067367663246208,
    0.31230683198008807, 0.3240594924340835, 0.33592417502129335,
    0.34789332544355345, 0.35995932288754645, 0.37211448487701004,
    0.38435107216420339, 0.39666129365752345, 0.40903731138212795,
    0.42147124547041054, 0.43395517917914878, 0.44648116393013132,
    0.45904122437105377, 0.47162736345346296, 0.48423156752451435,
    0.49684581142930129, 0.5094620636205095, 0.5220722912721385,
    0.53466846539404078, 0.54724256594401566, 0.55978658693420735,
    0.57229254152855535, 0.58475246712804829, 0.59715843044054884,
    0.60950253253195652, 0.621776913855496, 0.63397375925592647,
    0.64608530294548772, 0.658103833448412, 0.67002169851085669,
    0.68183130997313057, 0.69352514860110848, 0.70509576887376357,
    0.71653580372376424, 0.72783796922812072, 0.73899506924589131,
    0.75000000000000011, 0.76084575460024229, 0.77152542750460618,
    0.78203221891606156, 0.79235943911202356, 0.80250051270372791,
    0.81244898282281364, 0.82219851523243848, 0.83174290236031889,
    0.84107606725111883, 0.85019206743567521, 0.85908509871459637,
    0.867749498853821, 0.87617975118979063, 0.88437048814193309,
    0.89231649463022722, 0.9000127113956673, 0.90745423822151694,
    0.91463633705330016, 0.92155443501554213, 0.92820412732334,
    0.93458118008690994, 0.94068153300732438, 0.94650130196172277,
    0.95203678147635129, 0.95728444708585358, 0.96224095757731609,
    0.96690315711763231, 0.97126807726283637, 0.975332938848126,
    0.97909515375736833, 0.98255232657096658, 0.98570225609103379,
    0.98854293674290616, 0.9910725598521013, 0.99328951479591054,
    0.99519239002888882, 0.99677997398159246, 0.9980512558319915,
    0.99900542614906418, 0.99964187740816568, 0.99996020437784194,
    0.99996020437784194, 0.99964187740816568, 0.99900542614906418,
    0.9980512558319915, 0.99677997398159246, 0.99519239002888882,
    0.99328951479591054, 0.9910725598521013, 0.988542936742906,
    0.98570225609103379, 0.98255232657096669, 0.97909515375736844,
    0.975332938848126, 0.97126807726283637, 0.96690315711763231,
    0.96224095757731609, 0.9572844470858537, 0.95203678147635118,
    0.94650130196172289, 0.94068153300732438, 0.93458118008691,
    0.92820412732334023, 0.92155443501554224, 0.91463633705330027,
    0.90745423822151694, 0.9000127113956673, 0.89231649463022733,
    0.88437048814193342, 0.87617975118979063, 0.86774949885382113,
    0.85908509871459637, 0.85019206743567555, 0.841076067251119,
    0.83174290236031889, 0.82219851523243859, 0.81244898282281386,
    0.802500512703728, 0.79235943911202367, 0.78203221891606189,
    0.7715254275046064, 0.76084575460024229, 0.74999999999999978,
    0.73899506924589142, 0.72783796922812083, 0.71653580372376457,
    0.70509576887376357, 0.69352514860110859, 0.68183130997313079,
    0.67002169851085713, 0.658103833448412, 0.64608530294548794,
    0.63397375925592692, 0.621776913855496, 0.6095025325319563,
    0.59715843044054873, 0.58475246712804829, 0.57229254152855547,
    0.55978658693420769, 0.54724256594401566, 0.534668465394041,
    0.52207229127213894, 0.50946206362050994, 0.49684581142930107,
    0.48423156752451413, 0.47162736345346296, 0.45904122437105388,
    0.44648116393013154, 0.43395517917914878, 0.42147124547041065,
    0.40903731138212823, 0.39666129365752389, 0.3843510721642035,
    0.37211448487701027, 0.35995932288754645, 0.34789332544355345,
    0.33592417502129313, 0.32405949243408338, 0.31230683198008807,
    0.30067367663246231, 0.28916743327490835, 0.27779542798567813,
    0.26656490137302724, 0.25548300396508367, 0.24455679165707478,
    0.23379322121880697, 0.22319914586525763, 0.21278131089310048,
    0.20254634938594557, 0.19250077799102344, 0.18265099277000596,
    0.17300326512660547, 0.16356373781354072, 0.15433842102141992,
    0.14533318855202343, 0.13655377407842806, 0.12800576749435055,
    0.11969461135503573, 0.1116255974119571, 0.10380386324353502,
    0.096234388984015151, 0.088921994152595107, 0.081871334584814326,
    0.075086899468161328, 0.068573008483788722, 0.0623338090561506,
    0.056373273712319205, 0.050695197552658833, 0.0453031958344674,
    0.040200701670125349, 0.035390963841217482, 0.030877044730018621,
    0.026661818369660528, 0.022747968614222458, 0.019137987429907688,
    0.015834173308398092, 0.012838629803393342, 0.010153264191268996,
    0.0077797862567046128, 0.0057197072040557351, 0.0039743386951633375,
    0.002544792014212871, 0.0014319773601739749, 0.0006366032672731059,
    0.00015917615386623618, 0.0 };

  double dv2[125];
  double unusedU0[125];
  double M;
  int k;

  //  2Hz High Pass:
  // Other var decs:
  filtfilt(*(double (*)[15000])&inputData[0], FILT_FULL);
  memcpy(&b_FILT_FULL[0], &FILT_FULL[0], 15000U * sizeof(double));
  b_filtfilt(b_FILT_FULL, FILT_FULL);

  //  figure(10);
  //  subplot(3,1,1);title('Forearm EMG Filtered Signal - Channel 1'); plot(FILT_FULL(:,1));xlabel('Samples, 250Hz Sample Rate'); ylabel('Voltage V'); 
  // select chunk of 250:
  for (j = 0; j < 235; j++) {
    ixstart = 63 * j;
    memcpy(&dWF[0], &FILT_FULL[ixstart], 250U * sizeof(double));
    sig_rms_pad_fixed(dWF, dv0);
    sigRMSIntegral[j] = trapz(dv0);
    b_RMS[j] = rms(dWF);
    ixstart = 1;
    mtmp = dWF[0];
    if (rtIsNaN(dWF[0])) {
      ftmp = 2;
      exitg1 = false;
      while ((!exitg1) && (ftmp < 251)) {
        ixstart = ftmp;
        if (!rtIsNaN(dWF[ftmp - 1])) {
          mtmp = dWF[ftmp - 1];
          exitg1 = true;
        } else {
          ftmp++;
        }
      }
    }

    if (ixstart < 250) {
      while (ixstart + 1 < 251) {
        if (dWF[ixstart] > mtmp) {
          mtmp = dWF[ixstart];
        }

        ixstart++;
      }
    }

    MAX[j] = mtmp;
    welch_psd(dWF, dv1, dv2, unusedU0);
    for (ixstart = 0; ixstart < 125; ixstart++) {
      PSD[j + 235 * ixstart] = dv2[ixstart];
    }

    ixstart = 63 * j;
    memcpy(&dWF[0], &inputData[ixstart + 15000], 250U * sizeof(double));
    sort(dWF);
    M = dWF[0];
    ixstart = 1;
    mtmp = dWF[0];
    ftmp = 1;
    for (k = 0; k < 249; k++) {
      if (dWF[k + 1] == mtmp) {
        ftmp++;
      } else {
        if (ftmp > ixstart) {
          M = mtmp;
          ixstart = ftmp;
        }

        mtmp = dWF[k + 1];
        ftmp = 1;
      }
    }

    if (ftmp > ixstart) {
      M = mtmp;
    }

    CLASS[j] = M;
  }

  //  nF = size(F,2)-1;
  for (ixstart = 0; ixstart < 235; ixstart++) {
    RMS[ixstart] = b_RMS[ixstart];
    RMS[235 + ixstart] = sigRMSIntegral[ixstart];
    RMS[470 + ixstart] = MAX[ixstart];
  }

  for (ixstart = 0; ixstart < 125; ixstart++) {
    memcpy(&RMS[ixstart * 235 + 705], &PSD[ixstart * 235], 235U * sizeof(double));
  }

  memcpy(&RMS[30080], &CLASS[0], 235U * sizeof(double));
  memcpy(&F[0], &RMS[0], 30315U * sizeof(double));
}

//
// Arguments    : void
// Return Type  : void
//
void ctrainingRoutine1ch_initialize()
{
  rt_InitInfAndNaN(8U);
}

//
// Arguments    : void
// Return Type  : void
//
void ctrainingRoutine1ch_terminate()
{
  // (no terminate code required)
}

//
// File trailer for ctrainingRoutine1ch.cpp
//
// [EOF]
//
